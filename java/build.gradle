/*
 * Copyright (c) 2020-2021. CodeHead Systems. All rights reserved
 * Ned Wolpert <ned.wolpert@codeheadsystems.com>
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://maven.google.com" } // Google's Maven repository
        gradlePluginPortal() // was jcenter() which is dying
        google()
    }
}

allprojects {
    group 'org.svarm'
    version '1.0.0-SNAPSHOT'

    apply plugin: "java-library"
    apply plugin: "idea"
    apply plugin: 'jacoco'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    apply plugin: 'checkstyle'
    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
        withJavadocJar()
        withSourcesJar()
    }
    checkstyleTest { // ignore checkstyle in tests
        ignoreFailures true
        showViolations false
        enabled = false
    }
    checkstyle {
        ignoreFailures = false
        maxWarnings = 0
    }
    // Ensure we have lint warnings displayed so we can fix or  @SuppressWarnings("unchecked")
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
    }
    test {
        useJUnitPlatform() // needed for junit5
        finalizedBy jacocoTestReport
    }
    dependencies {
        implementation(libs.codehead.metrics)
        implementation(libs.codehead.metrics.micrometer)

        implementation libs.slf4j.api
        implementation libs.bcprov
        implementation libs.guava

        implementation libs.javax.inject
        implementation libs.dagger
        annotationProcessor libs.dagger.compiler
        compileOnly libs.immutables.value
        annotationProcessor libs.immutables.value

        implementation libs.jackson.annotations
        implementation libs.jackson.core
        implementation libs.jackson.databind
        implementation libs.jackson.datatype.jdk8

        testImplementation(libs.codehead.test)
        testImplementation(libs.codehead.metrics.test)
        testImplementation(libs.bundles.testing)
        testImplementation(libs.junit.platform.suite.api)
        testImplementation(libs.junit.platform.suite.engine)

        testCompileOnly libs.immutables.value
        testAnnotationProcessor libs.immutables.value
        testAnnotationProcessor libs.dagger.compiler

        // Logging in tests
        testImplementation libs.bundles.logback

        testImplementation libs.junit.platform.launcher
    }

    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    test {
        useJUnitPlatform {
            if (!project.hasProperty('integ')) {
                excludeTags 'integ'
            }
        }
    }
}

task dockerLogs(type: Exec) {
    commandLine "mkdir", "-p", "build/docker-log", "build/work/pgsql", "build/work/etcd", "build/work/node"
}

task dockerCompose(type: Exec) {
    commandLine "docker", "compose", "up"
}
dockerCompose.dependsOn dockerLogs
dockerCompose.dependsOn ':control:dockerImage', ':proxy:dockerImage', ':node:dockerImage'