/*
 * Copyright (c) 2020-2023. CodeHead Systems. All rights reserved
 * Ned Wolpert <ned.wolpert@codeheadsystems.com>
 */

apply plugin: "java-library"
apply plugin: "eclipse"

ext {
    appName = "endToEnd"
}

configurations {
    project.archivesBaseName = "${appName}"
    jar.archiveBaseName = "${appName}"
}

dependencies {
    implementation project(":common")
    implementation project(":config-common")
    implementation project(":server-common")
    implementation project(":control-common")
    implementation project(":control-javaClient")
    implementation project(":control")
    implementation project(":node-common")
    implementation project(":node-javaClient")
    implementation project(":node")
    implementation project(":proxy")
    implementation project(":proxy-common")
    implementation project(":proxy-javaClient")
    implementation libs.guava

    // etcd
    testImplementation libs.jetcd.core
    testImplementation libs.jetcd.test

    implementation libs.javax.inject
    implementation libs.dagger
    annotationProcessor libs.dagger.compiler

    implementation libs.jackson.annotations
    implementation libs.jackson.core
    implementation libs.jackson.databind
    implementation libs.jackson.datatype.jdk8
    implementation libs.dropwizard.auth
    implementation libs.dropwizard.core
    implementation libs.dropwizard.jackson
    implementation libs.dropwizard.metrics.graphite
    implementation libs.micrometer.core
    implementation libs.metrics.core

    implementation libs.openfeign.core
    implementation libs.openfeign.jackson
    implementation libs.feign.slf4j
    implementation libs.feign.micrometer
    implementation libs.openfeign.java11
    implementation libs.openfeign.jaxrs2

    implementation libs.retrofit
    implementation libs.retrofit2.converter.jackson

    testImplementation libs.testcontainers
    testImplementation libs.testcontainers.postgresql
    testImplementation libs.dropwizard.testing
    testImplementation libs.jackson.dataformat.yaml
    testAnnotationProcessor libs.dagger.compiler
    testImplementation libs.pgjdbc

    // Logging stuff... need all these for logback changes
    implementation libs.logback.classic
    implementation libs.logback.core
    implementation libs.logback.access
    implementation libs.jakarta.servlet.api
    implementation libs.javax.servlet.api
}

task logDir(type: Exec) {
    commandLine "mkdir", "-p", "build/docker-log"
}

task composeUp(type: Exec) {
    onlyIf {project.hasProperty("e2e")}
    commandLine "docker", "compose", "up", "--wait"
}
task preTestComposeDown(type: Exec) {
    onlyIf {project.hasProperty("e2e")}
    commandLine "docker", "compose", "down"
}
task finalComposeDown(type: Exec) {
    onlyIf {project.hasProperty("e2e")}
    commandLine "docker", "compose", "down"
}
composeUp.dependsOn logDir, preTestComposeDown,
        ':control:installDist', ':node:installDist', ":proxy:installDist"

integ {
    enabled = false
}
test {
    onlyIf {project.hasProperty("e2e")}
    dependsOn composeUp
    finalizedBy finalComposeDown
}
